#include "destor.h"
#include "jcr.h"
#include "backup.h"

static pthread_t hash_t;
static int64_t chunk_num;

static void* sha1_thread(void* arg) {
	printf("start hash_thread\n");
	char code[41];
	//int flag=0;
	int i;
	int quality=90;
	while (1) {
		struct chunk* c = sync_queue_pop(chunk_queue);

		if (c == NULL) {
			sync_queue_term(hash_queue);
			break;
		}

		if (CHECK_CHUNK(c, CHUNK_FILE_START) || CHECK_CHUNK(c, CHUNK_FILE_END)) {
			if(CHECK_CHUNK(c, CHUNK_FILE_START)&&PIC_CHUNK_YES_OR_NO&&c->row!=0) {
				quality=(int)c->data[c->size-2];
				//printf("qua2=%d\n",quality);
			}
			sync_queue_push(hash_queue, c);
			continue;
		}

		
		
		//判定是否是图片块，如果是则进行压缩
		int count=0;
		unsigned char *avg=(unsigned char *)malloc(100*sizeof(unsigned char));
		if(PIC_CHUNK_YES_OR_NO&&c->row!=0){
				int m,n;
				int pure=1;
				int size3=c->size/3;
				unsigned char *gray=(unsigned char *)malloc(c->size*sizeof(unsigned char));
				/*for(n=0;n<c->size;n++){
						printf("%d ",c->data[n]);	
					}
				printf("\n\n");*/
				n=0;
				for(m=0;m<=c->size;m+=3){
					gray[n++]=(31*c->data[m]+60*c->data[m+1]+11*c->data[m+2])>>9;
					//gray[m]=c->data[m];
				}
				/*int off=90*c->column;
				for(m=0;m<10;m++){
					for(n=90;n<100;n++){
						printf("%d ",gray[off+n]);	
					}
					off+=c->column;
					printf("\n");
				}*/
				
	
				
				int w10=c->column/10;
				int h10=c->row/10;
				int i,j;
				
				int k=0;
				for(i=0;i<c->row;i+=h10){
					for(j=0;j<c->column;j+=w10){
						int offset=i*c->column+j;
						avg[k++]=grayavg(gray,offset,c->column,c->row);
					}
				}
				

				for(m=1;m<100;m++){//判断颜色相近块
					if(avg[m]-avg[m-1]>1) count++;
					printf("%d ",avg[m]);
				}
				printf("\ncount=%d\n",count);
				if(0){
					set_pure_chunk(c);
				}
				/*for(m=3;m<c->size;m+=3){
					if(c->data[0]!=c->data[m]||c->data[1]!=c->data[m+1]||c->data[2]!=c->data[m+2]){
						flag=0;
						break;					
					}	
				}*/
				/*if(pure){//是纯色块
					set_pure_chunk(c);
				}*/
				else{//非纯色块，进行jpeg压缩
					unsigned char *outbuf=(unsigned char *)malloc(50000*sizeof(unsigned char));
					unsigned long len=0;
					unsigned char **inbuf=(unsigned char **)malloc(c->row*sizeof(unsigned char *));
					int temp1=c->column*3;
					for(m=0;m<c->row;m++)
						inbuf[m]=(unsigned char *)malloc(temp1*sizeof(unsigned char));				
					int k=0;
					int n;
					for(m=0;m<c->row;m++){
						for(n=0;n<temp1;n++)
							inbuf[m][n]=c->data[k+n];
						k+=temp1;
					}
					len=write_to_mem(outbuf,inbuf,quality,c->column,c->row);//len为实际长度
					m=0;
					while(m<len){
						if(outbuf[m]==255&&outbuf[m+1]==218){
							break;
						}
						m++;
					}
					int rlen=len-m;
					len=m;
					free(c->data);
					c->data=NULL;
					c->data=(unsigned char *)malloc((rlen+2)*sizeof(unsigned char));	
					for(m=0;m<rlen;m++)
						c->data[m]=outbuf[len+m];
					c->data[m]=c->row;
					c->data[m+1]=c->column;//不同像素块压缩后可能数据一样，此操作是为了避免指纹冲突
					c->size=rlen+2;
					free(outbuf);
					outbuf=NULL;	
					for(i=0;i<c->row;i++){
						free(inbuf[i]);
						inbuf[i]=NULL;
					}		
				}	
		}
		
		TIMER_DECLARE(1);
		TIMER_BEGIN(1);
		SHA_CTX ctx;
		SHA_Init(&ctx);

		if(count<=5||c->column!=100||c->row!=100) SHA_Update(&ctx, c->data, c->size);
		else SHA_Update(&ctx, avg, 100);
		SHA_Final(c->fp, &ctx);
		TIMER_END(1, jcr.hash_time);

		jcr.chunk_num++;
		//jcr.data_size += c->size;

		/*for(i=0;i<20;i++) printf("%d",c->fp[i]);
		printf("\n");*/
		hash2code(c->fp, code);
		code[40] = 0;
		VERBOSE("Hash phase: %ldth chunk identified by %s", chunk_num++, code);

		sync_queue_push(hash_queue, c);
		//printf("%d hash chunk end\n",ii++);
	}
//printf(" hash phase end\n");
	return NULL;
}

void start_hash_phase() {
	hash_queue = sync_queue_new(1000);
	pthread_create(&hash_t, NULL, sha1_thread, NULL);
}

void stop_hash_phase() {
	pthread_join(hash_t, NULL);
}


int grayavg(unsigned char *gray,int offset,int width,int height ){
	int avg=0;
	int m,n;
	int w10=width/10;
	int h10=height/10;
	for(m=0;m<h10;m++){
		for(n=0;n<w10;n++){
			avg+=gray[offset+n];
		}
		offset+=width;
	}
	return avg/(w10*h10*2);
}
